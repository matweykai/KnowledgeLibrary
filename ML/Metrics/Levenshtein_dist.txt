Расстояние Левенштейна - это метрика, которая применяется для сравнения близости
		двух символьных последовательностей, которая показывает сколько
		операций удаления, добавления и перестановки нужно сделать, 
		чтобы из последовательности A получить последовательность B

* Данная метрика задаётся рекурсивно, хотя вычисляется с помощью матрицы

Алгоритм:
	1) Составляется матрица, размеры которой определяются 
	   последовательностями символов A и B c размерами n и m

	2) Первый столбец и первая строка заполняется цифрами 0, 1, 2, ... n(m)

	3) Далее рассматриваются построчно ячейки матрицы и заполняются 
	   значениями:

		D(i, j) = min(
			D(i, j - 1) + 1,
			D(i - 1, j) + 1,
			D(i - 1, j - 1) + m(A(i), B(j))
		)

		m(A(i), B(j)) = {
					0 - если A_i и B_j равны, 
					1 - в противном случае
				}

	4) Взять значение из правой нижней ячейки

* Первое выражение можно интерпретировать как вставку i-го символа 
  для получения строки B из A. Тк это операция, то добавляем 1.

* Второе выражение по такой логике будет отвечать за удаление i-го символа,
  чтобы получить B из A. Тк это операция, то добавляем 1.

* А в последнем выражении получается, что если символы A_i и B_j равны, то
  есть стоят на своих местах, то мы просто получаем из подстроки (A_1, 
  A_2, ..., A_i-1) подстроку (B_1, B_2, ..., B_j-1), а это стоит D(i-1, j-1)
  операций. Если они не равны, то мы заменяем i символ из A на j символ из B.

Статьи:
 - https://www.statology.org/levenshtein-distance-in-python/
 - https://www.youtube.com/watch?v=r6LRslQvveQ
 - https://habr.com/ru/articles/676858/
